generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String                    @id @default(cuid())
  email            String                    @unique
  username         String                    @unique
  password         String
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  conversations    ConversationParticipant[]
  participations   EventParticipation[]
  events           Event[]
  receivedMessages Message[]                 @relation("MessageReceiver")
  sentMessages     Message[]                 @relation("MessageSender")
  profile          UserProfile?

  @@map("users")
}

model UserProfile {
  id                   String   @id @default(cuid())
  userId               String   @unique
  firstName            String?
  lastName             String?
  avatar               String?
  bio                  String?
  location             Json?
  sports               String[]
  skillLevel           String?
  availability         String[]
  enableGeolocation    Boolean  @default(false)
  lastKnownPosition    Json?    // { lat: number, lng: number, timestamp: Date }
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Event {
  id              String               @id @default(cuid())
  title           String
  description     String?
  sport           String
  date            DateTime
  startTime       String
  duration        Int
  location        Json
  coordinates     Json?                // { lat: number, lng: number }
  maxParticipants Int
  minParticipants Int                  @default(1)
  skillLevel      String[]
  status          String               @default("active")
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  creatorId       String
  conversations   Conversation[]
  participants    EventParticipation[]
  creator         User                 @relation(fields: [creatorId], references: [id])

  @@index([sport, date])
  @@index([date])
  @@index([creatorId])
  @@map("events")
}

model EventParticipation {
  id          String    @id @default(cuid())
  eventId     String
  userId      String
  status      String    @default("interested")
  joinedAt    DateTime  @default(now())
  confirmedAt DateTime?
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_participations")
}

model Conversation {
  id           String                    @id @default(cuid())
  eventId      String?
  type         String
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  participants ConversationParticipant[]
  event        Event?                    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime     @default(now())
  lastReadAt     DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

model Message {
  id             String        @id @default(cuid())
  content        String
  senderId       String
  receiverId     String?
  conversationId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  isEdited       Boolean       @default(false)
  isDeleted      Boolean       @default(false)
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  receiver       User?         @relation("MessageReceiver", fields: [receiverId], references: [id])
  sender         User          @relation("MessageSender", fields: [senderId], references: [id])

  @@index([conversationId, createdAt])
  @@map("messages")
}
