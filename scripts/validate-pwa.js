const fs = require('fs');
const path = require('path');

console.log('üîç Validation PWA TeamUp...\n');

// V√©rifier les fichiers essentiels
const requiredFiles = [
  'public/manifest.json',
  'public/sw.js',
  'public/icon-192x192.svg',
  'public/icon-512x512.svg'
];

let allFilesExist = true;

requiredFiles.forEach(file => {
  const filePath = path.join(__dirname, '..', file);
  if (fs.existsSync(filePath)) {
    console.log('‚úÖ', file);
  } else {
    console.log('‚ùå', file, '(MANQUANT)');
    allFilesExist = false;
  }
});

// V√©rifier le manifest.json
try {
  const manifestPath = path.join(__dirname, '..', 'public/manifest.json');
  const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
  
  console.log('\nüì± Validation Manifest:');
  console.log('‚úÖ name:', manifest.name);
  console.log('‚úÖ short_name:', manifest.short_name);
  console.log('‚úÖ start_url:', manifest.start_url);
  console.log('‚úÖ display:', manifest.display);
  console.log('‚úÖ icons:', manifest.icons.length + ' ic√¥nes');
  
  // V√©rifier les tailles d'ic√¥nes requises
  const requiredSizes = ['192x192', '512x512'];
  const availableSizes = manifest.icons.map(icon => icon.sizes);
  
  requiredSizes.forEach(size => {
    if (availableSizes.includes(size)) {
      console.log('‚úÖ Ic√¥ne', size);
    } else {
      console.log('‚ö†Ô∏è  Ic√¥ne', size, 'manquante');
    }
  });
  
} catch (error) {
  console.log('‚ùå Erreur manifest.json:', error.message);
}

// V√©rifier le Service Worker
try {
  const swPath = path.join(__dirname, '..', 'public/sw.js');
  const swContent = fs.readFileSync(swPath, 'utf8');
  
  console.log('\n‚öôÔ∏è Validation Service Worker:');
  console.log('‚úÖ Taille:', Math.round(swContent.length / 1024) + 'KB');
  
  if (swContent.includes("addEventListener('install'")) {
    console.log('‚úÖ Event listener install');
  }
  
  if (swContent.includes("addEventListener('activate'")) {
    console.log('‚úÖ Event listener activate');
  }
  
  if (swContent.includes("addEventListener('fetch'")) {
    console.log('‚úÖ Event listener fetch');
  }
  
  if (swContent.includes('caches.open')) {
    console.log('‚úÖ Cache API');
  }
  
} catch (error) {
  console.log('‚ùå Erreur Service Worker:', error.message);
}

// V√©rifier le layout.tsx
try {
  const layoutPath = path.join(__dirname, '..', 'app/layout.tsx');
  const layoutContent = fs.readFileSync(layoutPath, 'utf8');
  
  console.log('\nüé® Validation Layout:');
  
  if (layoutContent.includes('manifest: "/manifest.json"')) {
    console.log('‚úÖ R√©f√©rence manifest');
  } else {
    console.log('‚ö†Ô∏è  R√©f√©rence manifest manquante');
  }
  
  if (layoutContent.includes('PWAInstaller')) {
    console.log('‚úÖ Composant PWAInstaller');
  } else {
    console.log('‚ö†Ô∏è  Composant PWAInstaller manquant');
  }
  
  if (layoutContent.includes('OfflineIndicator')) {
    console.log('‚úÖ Composant OfflineIndicator');
  } else {
    console.log('‚ö†Ô∏è  Composant OfflineIndicator manquant');
  }
  
} catch (error) {
  console.log('‚ùå Erreur layout.tsx:', error.message);
}

console.log('\nüéØ R√©sultat de validation:');
if (allFilesExist) {
  console.log('‚úÖ TOUS LES FICHIERS PWA SONT PR√âSENTS');
  console.log('\nüìã Prochaines √©tapes:');
  console.log('1. npm run build');
  console.log('2. npm start');
  console.log('3. Tester sur https://localhost:3000');
  console.log('4. Ouvrir DevTools > Application > Manifest');
  console.log('5. V√©rifier "Add to Home Screen" disponible');
} else {
  console.log('‚ùå CERTAINS FICHIERS PWA SONT MANQUANTS');
}

console.log('\nüîó URLs de test:');
console.log('- Manifest: /manifest.json');
console.log('- Service Worker: /sw.js');
console.log('- Ic√¥nes: /icon-192x192.svg, /icon-512x512.svg');
