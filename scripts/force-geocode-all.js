// Script pour forcer le g√©ocodage de tous les √©v√©nements
// Usage: node scripts/force-geocode-all.js

async function forceGeocodeAllEvents() {
  console.log('üöÄ D√©marrage du g√©ocodage forc√© de tous les √©v√©nements...\n');
  
  try {
    const response = await fetch('http://localhost:3000/api/admin/geocoding/force-all', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        // Note: Remplacer par votre token d'authentification en production
        'Authorization': 'Bearer YOUR_ADMIN_TOKEN'
      }
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const result = await response.json();
    
    if (result.success) {
      console.log('‚úÖ G√©ocodage forc√© termin√© avec succ√®s !\n');
      
      console.log('üìä R√©sum√©:');
      console.log(`  ‚Ä¢ Total d'√©v√©nements: ${result.data.total}`);
      console.log(`  ‚Ä¢ D√©j√† g√©ocod√©s: ${result.data.alreadyGeocoded}`);
      console.log(`  ‚Ä¢ Trait√©s: ${result.data.processed}`);
      console.log(`  ‚Ä¢ Succ√®s: ${result.data.successful}`);
      console.log(`  ‚Ä¢ √âchecs: ${result.data.failed}`);
      console.log(`  ‚Ä¢ Taux de succ√®s: ${result.data.successRate}%\n`);
      
      if (result.data.details && result.data.details.length > 0) {
        console.log('üìç D√©tails par √©v√©nement:');
        result.data.details.forEach(detail => {
          if (detail.success) {
            console.log(`  ‚úÖ ${detail.event} (${detail.city}): ${detail.coords.lat.toFixed(4)}, ${detail.coords.lng.toFixed(4)}`);
          } else {
            console.log(`  ‚ùå ${detail.event} (${detail.city}): ${detail.error}`);
          }
        });
      }
      
      console.log('\nüéâ G√©ocodage termin√© ! Les √©v√©nements peuvent maintenant √™tre trouv√©s par proximit√©.');
      
    } else {
      console.error('‚ùå √âchec du g√©ocodage forc√©:', result.error);
      if (result.details) {
        console.error('D√©tails:', result.details);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du g√©ocodage forc√©:', error.message);
    console.log('\nüí° V√©rifications √† effectuer:');
    console.log('  1. Le serveur TeamUp est-il d√©marr√© sur localhost:3000 ?');
    console.log('  2. Avez-vous les permissions d\'administration ?');
    console.log('  3. La base de donn√©es est-elle accessible ?');
  }
}

async function testNearbySearch() {
  console.log('\nüîç Test de la recherche par proximit√©...');
  
  // Coordonn√©es de Paris pour le test
  const testLat = 48.8566;
  const testLng = 2.3522;
  const testRadius = 50; // 50km autour de Paris
  
  try {
    const response = await fetch(`http://localhost:3000/api/events/nearby?lat=${testLat}&lng=${testLng}&radius=${testRadius}`, {
      method: 'GET',
      headers: {
        'Authorization': 'Bearer YOUR_TOKEN'
      }
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const result = await response.json();
    
    if (result.success && result.data) {
      console.log(`‚úÖ Recherche par proximit√© fonctionnelle !`);
      console.log(`üìç ${result.data.length} √©v√©nements trouv√©s dans un rayon de ${testRadius}km autour de Paris\n`);
      
      if (result.data.length > 0) {
        console.log('üéØ Premiers √©v√©nements trouv√©s:');
        result.data.slice(0, 5).forEach(event => {
          console.log(`  ‚Ä¢ ${event.title} √† ${event.location.city} (${event.distance}km)`);
        });
        
        console.log('\n‚úÖ Le g√©ocodage fonctionne correctement !');
      } else {
        console.log('‚ÑπÔ∏è  Aucun √©v√©nement trouv√© dans la zone de test, mais la recherche fonctionne.');
      }
      
    } else {
      console.log('‚ö†Ô∏è  R√©ponse inattendue:', result);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de proximit√©:', error.message);
  }
}

// Script principal
async function main() {
  console.log('üåç Script de correction du g√©ocodage TeamUp\n');
  
  // √âtape 1: Forcer le g√©ocodage de tous les √©v√©nements
  await forceGeocodeAllEvents();
  
  // √âtape 2: Tester que la recherche par proximit√© fonctionne
  await testNearbySearch();
  
  console.log('\nüéØ Correction termin√©e !');
  console.log('Les √©v√©nements sont maintenant g√©olocalis√©s et peuvent √™tre trouv√©s par proximit√©.');
}

main().catch(console.error);
